import org.gradle.api.artifacts.*

if ( !project.hasProperty( 'typeOfRelease' ) || ( !project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) && !project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) ) ) {
    throw new GradleException("No valid type of release selected. Please add parameter 'typeOfRelease' with values 'SNAPSHOT' for snapshot release or 'RELEASE' for productive release. ")
}

buildscript {
    repositories {
        maven {
            url 'http://devserver:8081/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
        
            }
        }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${project.ext.'gradlePluginVersion.sonarsource.sonarqube-gradle-plugin'}"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:${project.ext.'gradlePluginVersion.jfrog.build-info-extractor-gradle'}"
    }
}

apply plugin: 'base' // To add "clean" task to the root project.
apply plugin: "org.sonarqube"

allprojects {
    apply from: rootProject.file('common.gradle')
    apply plugin: "com.jfrog.artifactory"
}

// Print build information...
println '***********************************************************'
println '* Build environment information:'
println '* =============================='
println "* Gradle wrapper version: ${GradleVersion.current()}"
println "* JDK version: ${JavaVersion.current()}"
println "* Source compatibility: ${project.sourceCompatibility}"
println "* Target compatibility: ${project.targetCompatibility}"
println '*'
println '* MAVEN artifact information:'
println '* ==========================='
println "* Group ID: ${project.group}"
println "* Artifact ID: ${project.name}"
println "* Version: ${project.version}"
println '***********************************************************'

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            if ( project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) ) {
                repoKey = 'libs-snapshot-local'
            }
            else if ( project.ext.typeOfRelease.equalsIgnoreCase( 'RELEASE' ) ) {
                repoKey = 'libs-release-local'
            }
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true   
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
            
        }
    }
}

task mergedJavadoc(type: Javadoc, description: 'Creates Javadoc from all the projects.') {
    title = 'All modules'
    destinationDir = new File(project.buildDir, 'merged-javadoc')

    // Note: The closures below are executed lazily.
    source {
        subprojects*.sourceSets*.main*.allSource
    }
    classpath.from {
        subprojects*.configurations*.compile*.copyRecursive({ !(it instanceof ProjectDependency); })*.resolve()
    }
}
