// This file is to be applied to every project.
configurations {
    testArtifacts.extendsFrom testRuntime
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    maven {
        url "${reporitory_url}/${repository_public}"
        credentials {
            username = "${repository_user}"
            password = "${repository_password}"
        
        }
    }
    mavenCentral()
    jcenter()
}

dependencies {
    // Adding dependencies here will add the dependencies to each subproject.
    testImplementation group: 'junit', name: 'junit', version: project.ext.'libraryVersion.junit.junit'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: project.ext.'libraryVersion.hamcrest.hamcrest'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: project.ext.'libraryVersion.mockito.mockito'
}

tasks.withType( Test ) {
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    jacoco {
        append=true
        destinationFile = file( "${rootProject.buildDir}/jacoco/combinedJacocoTest.exec" )
    }
}

jacoco {
    toolVersion = project.ext.'gradlePluginVersion.jacoco.toolVersion'
}

jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories =  files(sourceSets.main.output)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

String mavenArtifactId = name
group = project.ext.mavenGroupId
version = project.ext.mavenVersion
// Append suffix '-SNAPSHOT' if it is a snapshot release...
if ( !project.hasProperty( 'typeOfRelease' ) || project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) ) {
    version += '-SNAPSHOT'
}

task sourcesJar( type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.' ) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar( type: Jar, dependsOn: 'javadoc', description: 'Creates a jar from the JavaDoc files.' ) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task testJar(type: Jar) {
    classifier "test"
    from sourceSets.test.output
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
    
    testArtifacts testJar
}

publishing {
    def repoKey = ''
    
    if ( !project.hasProperty( 'typeOfRelease' ) || project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) ) {
        repoKey = 'snapshot'
    }
    else if ( project.ext.typeOfRelease.equalsIgnoreCase( 'RELEASE' ) ) {
        repoKey = 'release'
    }
    
    repositories {
        
        maven {
            name repoKey
            credentials {
                username repository_user
                password repository_password
            }
            if ( !project.hasProperty( 'typeOfRelease' ) || project.ext.typeOfRelease.equalsIgnoreCase( 'SNAPSHOT' ) ) {
                url "${reporitory_url}/${repository_snapshots}"
            }
            else if ( project.ext.typeOfRelease.equalsIgnoreCase( 'RELEASE' ) ) {
                url "${reporitory_url}/${repository_releases}"
            }
        }
    }
    
    publications {
        mavenJava( MavenPublication ) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        }
    }
}

configure( install.repositories.mavenInstaller ) {
    pom.project {
        groupId = mavenGroupId
        artifactId = mavenArtifactId
        version = mavenVersion
    }
}

task createFolders( description: 'Creates the source folders if they do not exist.' ) doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if ( !srcDir.isDirectory() ) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}
